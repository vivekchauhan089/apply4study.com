// generate-pages-wrapper.js
import fs from "fs";
import path from "path";
import glob from "glob";

const ROOT_DIR = process.cwd();
const SRC_DIR = path.join(ROOT_DIR, "src/pages");
const PAGES_DIR = path.join(ROOT_DIR, "pages");
const RENDERER_DIR = path.join(ROOT_DIR, "renderer");
const ASSETS_SRC = path.join(ROOT_DIR, "src/assets");
const ASSETS_DEST = path.join(ROOT_DIR, "dist/assets");

// Ensure directories exist
[PAGES_DIR, RENDERER_DIR, ASSETS_DEST].forEach((dir) => {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
});

// Route map
const routeMap = {
  Home: "/",
  About: "/about",
  Courses: "/courses",
  Services: "/services",
  Price: "/pricing",
  getStarted: "/get-started",
  Blog: "/blog",
  Partners: "/partners",
  Contact: "/contact",
  PrivacyPolicy: "/privacy-policy",
  TermsConditions: "/terms-conditions",
  ShippingPolicy: "/shipping-policy",
  RefundPolicy: "/refund-policy",
};

// 1️⃣ Generate page wrappers
const files = glob.sync(`${SRC_DIR}/*.jsx`);

files.forEach((file) => {
  const base = path.basename(file, ".jsx");
  const wrapperFile = path.join(PAGES_DIR, `${base}.page.jsx`);
  const routePath = routeMap[base] || `/${base.toLowerCase()}`;

  const content = `// Auto-generated by generate-pages-wrapper.js
import React from "react";
import Component from "../src/pages/${base}.jsx";

export { Page }
export const documentProps = {
  title: "${base} | Apply4Study",
  description: "${base} page"
};

function Page() {
  return <Component />;
}
`;

  fs.writeFileSync(wrapperFile, content, "utf8");
  console.log("✅ Generated:", wrapperFile);
});

// 2️⃣ Generate renderer files
const rendererFiles = [
  {
    file: "_default.page.client.jsx",
    content: `import React from 'react'
import ReactDOM from 'react-dom/client'
import { PageShell } from './PageShell.jsx'

export { render }

function render(pageContext) {
  const { Page } = pageContext
  const container = document.getElementById('page-view')
  ReactDOM.hydrateRoot(
    container,
    <PageShell pageContext={pageContext}>
      <Page />
    </PageShell>
  )
}`
  },
  {
    file: "_default.page.server.jsx",
    content: `import React from 'react'
import ReactDOMServer from 'react-dom/server'
import { escapeInject, dangerouslySkipEscape } from 'vite-plugin-ssr/server'
import { PageShell } from './PageShell.jsx'

export { render }

function render(pageContext) {
  const { Page, documentProps } = pageContext
  const title = documentProps?.title || 'Apply4Study'
  const desc = documentProps?.description || 'Study abroad portal'

  const pageHtml = ReactDOMServer.renderToString(
    <PageShell pageContext={pageContext}>
      <Page />
    </PageShell>
  )

  return escapeInject\`<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="\${desc}" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>\${title}</title>
  </head>
  <body>
    <div id="page-view">\${dangerouslySkipEscape(pageHtml)}</div>
  </body>
</html>\`
}`
  },
  {
    file: "PageShell.jsx",
    content: `import React from 'react'

export function PageShell({ children, pageContext }) {
  const title = pageContext?.documentProps?.title || 'Apply4Study'
  const desc = pageContext?.documentProps?.description || 'Study abroad portal'

  return (
    <React.StrictMode>
      <div id="page-view">{children}</div>
    </React.StrictMode>
  )
}`
  }
];

rendererFiles.forEach(({ file, content }) => {
  fs.writeFileSync(path.join(RENDERER_DIR, file), content, "utf8");
  console.log("✅ Generated renderer:", file);
});

// 3️⃣ Copy assets with glob query
glob(`${ASSETS_SRC}/**/*`, { nodir: true, query: "?extractAssets" }, (err, files) => {
  if (err) throw err;
  files.forEach((f) => {
    const relPath = path.relative(ASSETS_SRC, f);
    const dest = path.join(ASSETS_DEST, relPath);
    const destDir = path.dirname(dest);
    if (!fs.existsSync(destDir)) fs.mkdirSync(destDir, { recursive: true });
    fs.copyFileSync(f, dest);
  });
  console.log("✅ Copied all assets to dist/assets");
});

console.log("\n✨ All page wrappers, renderer files, and assets generated successfully!");
