// generate-pages-wrapper.js
import fs from "fs";
import path from "path";
import glob from "glob";

const ROOT_DIR = process.cwd();
const SRC_DIR = path.join(ROOT_DIR, "src/pages");
const PAGES_DIR = path.join(ROOT_DIR, "pages");
const RENDERER_DIR = path.join(ROOT_DIR, "renderer");
const ASSETS_SRC = path.join(ROOT_DIR, "src/assets");
const ASSETS_DEST = path.join(ROOT_DIR, "dist/assets");

// Ensure directories exist
[PAGES_DIR, RENDERER_DIR, ASSETS_DEST].forEach((dir) => {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
});

// route mapping: filename -> URL
const routeMap = {
  // 'Home.jsx': '/',
  'About.jsx': '/about',
  // 'Courses.jsx': '/courses',
  // 'Services.jsx': '/services',
  // 'Price.jsx': '/pricing',
  // 'GetStarted.jsx': '/get-started',
  // 'Blog.jsx': '/blog',
  // 'Partners.jsx': '/partners',
  // 'Contact.jsx': '/contact',
  // 'PrivacyPolicy.jsx': '/privacy-policy',
  // 'TermsConditions.jsx': '/terms-conditions',
  // 'ShippingPolicy.jsx': '/shipping-policy',
  // 'RefundPolicy.jsx': '/refund-policy',
  // add more here
};

const files = fs.readdirSync(SRC_DIR).filter(f => f.endsWith('.jsx'));

files.forEach(file => {
  const filePath = path.join(SRC_DIR, file);
  const content = fs.readFileSync(filePath, 'utf8');

  // Detect default exported function
  const match = content.match(/export\s+default\s+function\s+([A-Za-z0-9_]+)/);
  if (match) {
    const componentName = match[1];
    const wrapperFile = path.join(PAGES_DIR, `${componentName}.page.jsx`);
    const routePath = routeMap[file] || `/${componentName.toLowerCase()}`;

    const content = `// Auto-generated by generate-pages-wrapper.js
import React from "react";
import Component from "../src/pages/${componentName}.jsx";

// Route used by Vike
export const route = "${routePath}";

// documentProps for Vike
export const documentProps = {
  title: {
    default: "${componentName}",
    template: "%s — Apply4Study",
    config: {}
  },
  description: {
    default: "${componentName} page",
    config: {}
  }
};

// ✅ V1-compatible default export
export default {
  Page: Component,
  route,
  documentProps
};
`;

  fs.writeFileSync(wrapperFile, content, "utf8");
  console.log("✅ Generated page wrapper:", wrapperFile);
  } else {
    console.log(`Skipped ${file} : no default exported function detected`);
  }
});


// 2️⃣ Generate renderer files
const rendererFiles = [
  {
    file: "_default.page.client.jsx",
    content: `import React from 'react'
import ReactDOM from 'react-dom/client'
import { PageShell } from './PageShell.jsx'

// export { render }

export async function render(pageContext) {
  const { Page } = pageContext
  const container = document.getElementById('page-view')

  ReactDOM.hydrateRoot(
    container,
    <PageShell pageContext={pageContext}>
      <Page />
    </PageShell>
  )
}`
  },
  {
    file: "_default.page.server.jsx",
    content: `import React from 'react'
import ReactDOMServer from 'react-dom/server'
import { escapeInject, dangerouslySkipEscape } from 'vike'
import { PageShell } from './PageShell.jsx'

// export { render }

export async function render(pageContext) {
  const { Page, exports } = pageContext
  const title = exports?.documentProps?.title?.default || 'Apply4Study'
  const desc = exports?.documentProps?.description?.default || 'Study abroad portal'

  const pageHtml = ReactDOMServer.renderToString(
    <PageShell pageContext={pageContext}>
      <Page />
    </PageShell>
  )

  return escapeInject\`<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="\${desc}" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>\${title}</title>
  </head>
  <body>
    <div id="page-view">\${dangerouslySkipEscape(pageHtml)}</div>
  </body>
</html>\`
}`
  },
  {
    file: "PageShell.jsx",
    content: `import React from 'react'

export function PageShell({ children, pageContext }) {
  return (
    <React.StrictMode>
      <div id="page-view">{children}</div>
    </React.StrictMode>
  )
}`
  }
];

rendererFiles.forEach(({ file, content }) => {
  fs.writeFileSync(path.join(RENDERER_DIR, file), content, "utf8");
  console.log("✅ Generated renderer file:", file);
});

// 3️⃣ Copy assets with glob query
glob(`${ASSETS_SRC}/**/*`, { nodir: true, query: "?extractAssets" }, (err, files) => {
  if (err) throw err;
  files.forEach((f) => {
    const relPath = path.relative(ASSETS_SRC, f);
    const dest = path.join(ASSETS_DEST, relPath);
    const destDir = path.dirname(dest);
    if (!fs.existsSync(destDir)) fs.mkdirSync(destDir, { recursive: true });
    fs.copyFileSync(f, dest);
  });
  console.log("✅ Copied all assets to dist/assets");
});

console.log("\n✨ All page wrappers, renderer files, and assets generated successfully!");
